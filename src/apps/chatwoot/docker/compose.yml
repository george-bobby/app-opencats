name: chatwoot

services:
  base: &base
    image: chatwoot/chatwoot:v4.4.0
    env_file:
      - .env.docker
    volumes:
      - storage_data:/app/storage

  rails:
    <<: *base
    depends_on:
      - postgres
      - redis
    ports:
      - '3000:3000'
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      # rate limiting configuration
      - ENABLE_RACK_ATTACK=false
      - ENABLE_RACK_ATTACK_WIDGET_API=false
      - RACK_ATTACK_LIMIT=10000
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD} 
    entrypoint: docker/entrypoints/rails.sh
    command: [ 'bundle', 'exec', 'rails', 's', '-p', '3000', '-b', '0.0.0.0' ]
    restart: always

  sidekiq:
    <<: *base
    depends_on:
      - postgres
      - redis
    environment:
      - NODE_ENV=production
      - RAILS_ENV=production
      - INSTALLATION_ENV=docker
      # rate limiting configuration
      - ENABLE_RACK_ATTACK=false
      - ENABLE_RACK_ATTACK_WIDGET_API=false
      - RACK_ATTACK_LIMIT=10000
    command: [ 'bundle', 'exec', 'sidekiq', '-C', 'config/sidekiq.yml' ]
    restart: always

  postgres:
    image: pgvector/pgvector:pg16
    restart: always
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    env_file: .env.docker
    environment:
      - POSTGRES_DB=${POSTGRES_DATABASE}
      - POSTGRES_USER=${POSTGRES_USERNAME}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

  redis:
    image: redis:alpine
    restart: always
    command: [ "sh", "-c", "redis-server --requirepass \"$REDIS_PASSWORD\"" ]
    env_file: .env.docker
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'

volumes:
  storage_data:
  postgres_data:
  redis_data:
